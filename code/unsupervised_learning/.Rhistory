require(quanteda, warn.conflicts = FALSE, quietly = TRUE)
require(readtext)
myCorpus <- corpus(readtext("dickens_austen/*.txt",docvarsfrom = "filenames", dvsep = "_",
docvarnames = c("author", "title")))
summary(myCorpus)
require(sophistication)
corpus_sentences_browse(myCorpus)
austen_corpus<-corpus_subset(myCorpus, author == "austen")
dickens_corpus<-corpus_subset(myCorpus, author == "dickens")
mystery_corpus<-corpus_subset(myCorpus, author == "mystery")
austen<-tokens(paste(unlist((austen_corpus$documents$texts)), collapse=' '))
dickens<-tokens(paste(unlist((dickens_corpus$documents$texts)), collapse=' '))
mystery<-tokens(paste(unlist((mystery_corpus$documents$texts)), collapse=' '))
austen_snippets<-vector()
snip_length<-1500
for(i in 1:100){
i
}
for(i in 1:100){
print(i)
}
i_vec<-vector()
for(i in 1:5){
i_vec[i]<-i^2
}
i_vec
length(austen$text1)
snip_length
ceiling(length(austen$text1)/snip_length)
length(austen$text1)/snip_length)
length(austen$text1)/snip_length
?ceiling
for(i in 1:ceiling(length(austen$text1)/snip_length)){
index<-(i-1)*snip_length + 1
# create appropriate length snippet
austen_snippets[i]<-paste(austen$text1[index:(index+snip_length)],sep="", collapse=" ")
}
austen_snippets[i]
austen_snippets[300]
austen_corpus<-corpus_subset(myCorpus, author == "austen")
dickens_corpus<-corpus_subset(myCorpus, author == "dickens")
mystery_corpus<-corpus_subset(myCorpus, author == "mystery")
austen<-tokens(paste(unlist((austen_corpus$documents$texts)), collapse=' '))
dickens<-tokens(paste(unlist((dickens_corpus$documents$texts)), collapse=' '))
mystery<-tokens(paste(unlist((mystery_corpus$documents$texts)), collapse=' '))
#initialize
austen_snippets<-vector()
##decide on snippet length
snip_length<-1500
## divide up austen texts
for(i in 1:ceiling(length(austen$text1)/snip_length)){
index<-(i-1)*snip_length + 1
# create appropriate length snippet
austen_snippets[i]<-paste(austen$text1[index:(index+snip_length)],sep="", collapse=" ")
}
#initialize
dickens_snippets<-vector()
## divide up dickens texts
for(i in 1:ceiling(length(dickens$text1)/snip_length)){
index<-(i-1)*snip_length + 1
# create appropriate length snippet
dickens_snippets[i]<-paste(dickens$text1[index:(index+snip_length)],sep="", collapse=" ")
}
#initialize
mystery_snippets<-vector()
## divide up mystery text
for(i in 1:ceiling(ntoken(mystery)/snip_length)){
index<-(i-1)*snip_length + 1
# create appropriate length snippet
mystery_snippets[i]<-paste(mystery$text1[index:(index+snip_length)],sep="", collapse=" ")
}
##combine the snippets
snippets<-c(austen_snippets,dickens_snippets)
#create a labeled vector
authors<-c(rep("austen", length(austen_snippets)), rep("dickens", length(dickens_snippets)))
authors<-c(rep("austen", length(austen_snippets)), rep("dickens", length(dickens_snippets)))
length(austen_snippets)
rep("austen", length(austen_snippets))
###list function words--taken from Peng & Hengartner
function_words<-c("a", "been", "had", "its", "one", "the", "were", "all", "but", "has", "may", "only", "their", "what",
"also", "by", "have", "more", "or", "then", "when", "an", "can", "her", "must", "our", "there", "which",
"and", "do", "his", "my", "should", "things", "who",  "any", "down", "if", "no", "so", "this", "will",
"are", "even", "in", "not", "some", "to", "with",  "as", "every", "into", "now", "such", "up", "would",
"at", "for", "is", "of", "than", "upon", "your","be", "from", "it", "on", "that", "was")
##Create DFMs of just the function words
snippets_dfm<-dfm(snippets, select = function_words)
mystery_dfm<-dfm(mystery_snippets, select = function_words)
###list function words--taken from Peng & Hengartner
function_words<-c("a", "been", "had", "its", "one", "the", "were", "all", "but", "has", "may", "only", "their", "what",
"also", "by", "have", "more", "or", "then", "when", "an", "can", "her", "must", "our", "there", "which",
"and", "do", "his", "my", "should", "things", "who",  "any", "down", "if", "no", "so", "this", "will",
"are", "even", "in", "not", "some", "to", "with",  "as", "every", "into", "now", "such", "up", "would",
"at", "for", "is", "of", "than", "upon", "your","be", "from", "it", "on", "that", "was")
##Create DFMs of just the function words
snippets_dfm<-dfm(snippets, select = function_words)
mystery_dfm<-dfm(mystery_snippets, select = function_words)
###run PCA
snippets_pca<-prcomp(snippets_dfm, center=TRUE, scale.=TRUE)
#snippets_pca<-prcomp(snippets_dfm)
##examine number of components
plot(snippets_pca, type = "l")
##packages for visualization--code taken from http://www.r-bloggers.com/computing-and-visualizing-pca-in-r/
library(ggbiplot)
edges <- read.csv("data/star-wars-network-edges.csv")
head(edges)
nodes <- read.csv("data/star-wars-network-nodes.csv")
head(nodes)
edges <- read.csv("data/star-wars-network-edges.csv")
head(edges)
nodes <- read.csv("data/star-wars-network-nodes.csv")
head(nodes)
View(edges)
View(nodes)
# install.packages("igraph")
library(igraph)
install.packages("igraph")
library(igraph)
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
g
V(g) # nodes
V(g)$name # names of each node
vertex_attr(g) # all attributes of the nodes
E(g) # edges
E(g)$weight # weights for each edge
edge_attr(g) # all attributes of the edges
g[] # adjacency matrix
g[1,] # first row of adjacency matrix
V(g) # nodes
V(g)$name # names of each node
vertex_attr(g) # all attributes of the nodes
E(g) # edges
E(g)$weight # weights for each edge
edge_attr(g) # all attributes of the edges
g[] # adjacency matrix
g[1,] # first row of adjacency matrix
par(mar=c(0,0,0,0))
plot(g)
par(mar=c(0,0,0,0))
plot(g,
vertex.color = "grey", # change color of nodes
vertex.label.color = "black", # change color of labels
vertex.label.cex = .75, # change size of labels to 75% of original size
edge.curved=.25, # add a 25% curve to the edges
edge.color="grey20") # change edge color to grey
strength(g)
V(g)$size <- strength(g)
par(mar=c(0,0,0,0)); plot(g)
V(g)$size <- log(strength(g)) * 4 + 3
par(mar=c(0,0,0,0)); plot(g)
strength(g)>=10
V(g)$label <- ifelse( strength(g)>=10, V(g)$name, NA )
V(g)$label
par(mar=c(0,0,0,0)); plot(g)
nodes$name=="R2-D2"
ifelse(nodes$name=="R2-D2", "yes", "no")
ifelse(grepl("R", nodes$name), "yes", "no")
V(g)$color <- NA
V(g)$color
V(g)$color[V(g)$name %in% dark_side] <- "red"
dark_side <- c("DARTH VADER", "MOTTI", "TARKIN")
light_side <- c("R2-D2", "CHEWBACCA", "C-3PO", "LUKE", "CAMIE", "BIGGS",
"LEIA", "BERU", "OWEN", "OBI-WAN", "HAN", "DODONNA",
"GOLD LEADER", "WEDGE", "RED LEADER", "RED TEN", "GOLD FIVE")
other <- c("GREEDO", "JABBA")
V(g)$color <- NA
V(g)$color[V(g)$name %in% dark_side] <- "red"
V(g)$color
# create vectors with characters in each side
dark_side <- c("DARTH VADER", "MOTTI", "TARKIN")
light_side <- c("R2-D2", "CHEWBACCA", "C-3PO", "LUKE", "CAMIE", "BIGGS",
"LEIA", "BERU", "OWEN", "OBI-WAN", "HAN", "DODONNA",
"GOLD LEADER", "WEDGE", "RED LEADER", "RED TEN", "GOLD FIVE")
other <- c("GREEDO", "JABBA")
# node we'll create a new color variable as a node property
V(g)$color <- NA
V(g)$color[V(g)$name %in% dark_side] <- "red"
V(g)$color[V(g)$name %in% light_side] <- "gold"
V(g)$color[V(g)$name %in% other] <- "grey20"
vertex_attr(g)
par(mar=c(0,0,0,0)); plot(g)
# what does %in% do?
1 %in% c(1,2,3,4)
1 %in% c(2,3,4)
par(mar=c(0,0,0,0)); plot(g)
legend(x=.75, y=.75, legend=c("Dark side", "Light side", "Other"),
pch=21, pt.bg=c("red", "gold", "grey20"), pt.cex=2, bty="n")
#E(g)$width <- log(E(g)$weight) + 1
E(g)$width <- (E(g)$weight)
edge_attr(g)
par(mar=c(0,0,0,0)); plot(g)
E(g)$width <- log(E(g)$weight) + 1
#E(g)$width <- (E(g)$weight)
edge_attr(g)
par(mar=c(0,0,0,0)); plot(g)
par(mfrow=c(1,2))
set.seed(777)
fr <- layout_with_fr(g, niter=1000)
par(mar=c(0,0,0,0)); plot(g, layout=fr)
set.seed(666)
fr <- layout_with_fr(g, niter=1000)
par(mar=c(0,0,0,0)); plot(g, layout=fr)
par(mfrow=c(1,2))
set.seed(666)
fr <- layout_with_fr(g, niter=1000)
par(mar=c(0,0,0,0)); plot(g, layout=fr)
set.seed(666)
fr <- layout_with_fr(g, niter=1000)
par(mar=c(0,0,0,0)); plot(g, layout=fr)
library(igraph)
edges <- read.csv("data/star-wars-network-edges.csv")
nodes <- read.csv("data/star-wars-network-nodes.csv")
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
sort(degree(g))
sort(degree(g), decreasing = TRUE)
sort(strength(g))
sort(betweenness(g))
sort(eigen_centrality(g)$vector)
sort(page_rank(g)$vector)
sort(authority_score(g)$vector)
neighbors(g, v=which(V(g)$name=="DARTH VADER"))
ego(g, order=2, nodes=which(V(g)$name=="DARTH VADER"))
diameter(g, directed=FALSE, weights=NA)
get_diameter(g, directed=FALSE, weights=NA)
mean_distance(g, directed=FALSE)
dist <- distances(g, weights=NA)
dist[1:5, 1:5]
edge_density(g)
# 22*21 possible edges / 2 because it's undirected = 231 possible edges
# but only 60 exist
60/((22*21)/2)
reciprocity(g)
# Why is it 1?
transitivity(g)
components(g)
par(mar=c(0,0,0,0)); plot(g)
giant <- decompose(g)[[1]]
decompose(g)
giant <- decompose(g)[[1]]
cluster_walktrap(giant)
cluster_walktrap(giant, steps=10)
cluster_fast_greedy(giant)
cluster_edge_betweenness(giant)
cluster_infomap(giant)
cluster_label_prop(giant)
comm <- cluster_infomap(giant)
modularity(comm) # modularity score
par(mar=c(0,0,0,0)); plot(comm, giant)
V(giant)$color <- membership(comm)
par(mar=c(0,0,0,0)); plot(giant)
coreness(g)
which(coreness(g)==6) # what is the core of the network?
which(coreness(g)==1) # what is the periphery of the network?
# Visualizing network structure
V(g)$coreness <- coreness(g)
par(mfrow=c(2, 3), mar=c(0.1,0.1,1,0.1))
set.seed(777); fr <- layout_with_fr(g)
for (k in 1:6){
V(g)$color <- ifelse(V(g)$coreness>=k, "orange", "grey")
plot(g, main=paste0(k, '-core shell'), layout=fr)
}
